import 'package:flutter/foundation.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:fpdart/fpdart.dart';

import '../../domain/entities/user_entity.dart';
import '../../domain/usecases/login_usecase.dart';
import '../../domain/usecases/signup_usecase.dart';
import '../../domain/usecases/forgot_password_usecase.dart';
import 'providers.dart';

@immutable
class AuthState {
  final UserEntity? user;
  final bool isLoading;
  final String? error;

  const AuthState({
    this.user,
    this.isLoading = false,
    this.error,
  });
}

class AuthNotifier extends StateNotifier<AuthState> {
  final LoginUseCase _loginUseCase;
  final SignupUseCase _signupUseCase;
  final ForgotPasswordUseCase _forgotPasswordUseCase;

  AuthNotifier({
    required LoginUseCase loginUseCase,
    required SignupUseCase signupUseCase,
    required ForgotPasswordUseCase forgotPasswordUseCase,
  })  : _loginUseCase = loginUseCase,
        _signupUseCase = signupUseCase,
        _forgotPasswordUseCase = forgotPasswordUseCase,
        super(const AuthState());

  Future<void> login({required String email, required String password}) async {
    state = AuthState(isLoading: true);
    try {
      final result = await _loginUseCase(email: email, password: password);
      result.fold(
        (error) => state = AuthState(isLoading: false, error: error),
        (user) => state = AuthState(isLoading: false, user: user),
      );
    } catch (e) {
      state = AuthState(isLoading: false, error: e.toString());
    }
  }

  Future<void> signup({
    required String email,
    required String password,
    required String displayName,
  }) async {
    state = AuthState(isLoading: true);
    try {
      final user = await _signupUseCase(email, password, displayName);
      state = AuthState(isLoading: false, user: user);
    } catch (e) {
      state = AuthState(isLoading: false, error: e.toString());
    }
  }

  Future<void> forgotPassword(String email) async {
    state = AuthState(isLoading: true);
    try {
      await _forgotPasswordUseCase(email);
      state = AuthState(isLoading: false);
    } catch (e) {
      state = AuthState(isLoading: false, error: e.toString());
    }
  }

  void clearError() {
    state = AuthState(user: state.user, isLoading: state.isLoading);
  }

  void logout() {
    state = const AuthState();
  }
}

final authProvider = StateNotifierProvider<AuthNotifier, AuthState>((ref) {
  return AuthNotifier(
    loginUseCase: ref.read(loginUseCaseProvider),
    signupUseCase: ref.read(signupUseCaseProvider),
    forgotPasswordUseCase: ref.read(forgotPasswordUseCaseProvider),
  );
});
